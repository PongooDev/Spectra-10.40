#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: Solaris

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class Solaris.SolarisArrayLibrary
// 0x0000 (0x0028 - 0x0028)
class USolarisArrayLibrary final : public UObject
{
public:
	static int32 Add(const TArray<int32>& Array, const int32& new_item);
	static int32 Num(const TArray<int32>& Array);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisArrayLibrary">();
	}
	static class USolarisArrayLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisArrayLibrary>();
	}
};

// Class Solaris.SolarisMathLibrary_Bool
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Bool final : public UObject
{
public:
	static bool assign(bool* LHS, bool RHS);
	static bool logical_not(bool Value);
	static bool logical_xor(bool LHS, bool RHS);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisMathLibrary_Bool">();
	}
	static class USolarisMathLibrary_Bool* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Bool>();
	}
};

// Class Solaris.SolarisMathLibrary_Int
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Int final : public UObject
{
public:
	static int32 abs(int32 Value);
	static int32 Add(int32 LHS, int32 RHS);
	static int32 assign(int32* LHS, int32 RHS);
	static int32 Divide(int32 LHS, int32 RHS);
	static bool equal(int32 LHS, int32 RHS);
	static bool greater(int32 LHS, int32 RHS);
	static bool greater_equal(int32 LHS, int32 RHS);
	static bool less(int32 LHS, int32 RHS);
	static bool less_equal(int32 LHS, int32 RHS);
	static int32 max_0(int32 LHS, int32 RHS);
	static int32 min_0(int32 LHS, int32 RHS);
	static int32 Multiply(int32 LHS, int32 RHS);
	static int32 negate(int32 Value);
	static bool not_equal(int32 LHS, int32 RHS);
	static int32 Subtract(int32 LHS, int32 RHS);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisMathLibrary_Int">();
	}
	static class USolarisMathLibrary_Int* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Int>();
	}
};

// Class Solaris.SolarisMathLibrary_Real
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Real final : public UObject
{
public:
	static float abs(float Value);
	static float Add(float LHS, float RHS);
	static float assign(float* LHS, float RHS);
	static float Divide(float LHS, float RHS);
	static bool equal(float LHS, float RHS);
	static bool greater(float LHS, float RHS);
	static bool greater_equal(float LHS, float RHS);
	static bool less(float LHS, float RHS);
	static bool less_equal(float LHS, float RHS);
	static float max_0(float LHS, float RHS);
	static float min_0(float LHS, float RHS);
	static float Multiply(float LHS, float RHS);
	static float negate(float Value);
	static bool not_equal(float LHS, float RHS);
	static float Subtract(float LHS, float RHS);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisMathLibrary_Real">();
	}
	static class USolarisMathLibrary_Real* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Real>();
	}
};

// Class Solaris.SolarisGameSettings
// 0x0018 (0x0040 - 0x0028)
class USolarisGameSettings final : public UObject
{
public:
	TArray<class FString>                         Blacklist;                                         // 0x0028(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int32                                         MaxAllowedSize;                                    // 0x0038(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-8 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisGameSettings">();
	}
	static class USolarisGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisGameSettings>();
	}
};

}

