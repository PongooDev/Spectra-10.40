#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: Synthesis

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "Synthesis_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "AudioMixer_classes.hpp"


namespace SDK
{

// Class Synthesis.EnvelopeFollowerListener
// 0x0020 (0x00D0 - 0x00B0)
class UEnvelopeFollowerListener final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(float EnvelopeValue)> OnEnvelopeFollowerUpdate;                    // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x10];                                      // 0x00C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-8 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvelopeFollowerListener">();
	}
	static class UEnvelopeFollowerListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvelopeFollowerListener>();
	}
};

// Class Synthesis.ModularSynthPresetBank
// 0x0010 (0x0038 - 0x0028)
class UModularSynthPresetBank final : public UObject
{
public:
	TArray<struct FModularSynthPresetBankEntry>   Presets;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModularSynthPresetBank">();
	}
	static class UModularSynthPresetBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModularSynthPresetBank>();
	}
};

// Class Synthesis.SourceEffectEnvelopeFollowerPreset
// 0x0040 (0x0080 - 0x0040)
class USourceEffectEnvelopeFollowerPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x34];                                      // 0x0040(0x0034)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectEnvelopeFollowerSettings  Settings;                                          // 0x0074(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void RegisterEnvelopeFollowerListener(class UEnvelopeFollowerListener* EnvelopeFollowerListener);
	void SetSettings(const struct FSourceEffectEnvelopeFollowerSettings& InSettings);
	void UnregisterEnvelopeFollowerListener(class UEnvelopeFollowerListener* EnvelopeFollowerListener);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectEnvelopeFollowerPreset">();
	}
	static class USourceEffectEnvelopeFollowerPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectEnvelopeFollowerPreset>();
	}
};

// Class Synthesis.ModularSynthLibrary
// 0x0000 (0x0028 - 0x0028)
class UModularSynthLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddModularSynthPresetToBankAsset(class UModularSynthPresetBank* InBank, const struct FModularSynthPreset& Preset, const class FString& PresetName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModularSynthLibrary">();
	}
	static class UModularSynthLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModularSynthLibrary>();
	}
};

// Class Synthesis.ModularSynthComponent
// 0x0680 (0x0C80 - 0x0600)
class UModularSynthComponent final : public USynthComponent
{
public:
	int32                                         VoiceCount;                                        // 0x0600(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_604[0x67C];                                    // 0x0604(0x067C)(Fixing Struct Size After Last Property [ Dumper-8 ])

public:
	struct FPatchId CreatePatch(const ESynth1PatchSource PatchSource, const TArray<struct FSynth1PatchCable>& PatchCables, const bool bEnableByDefault);
	void NoteOff(const float Note, const bool bAllNotesOff, const bool bKillAllNotes);
	void NoteOn(const float Note, const int32 Velocity, const float Duration);
	void SetAttackTime(float AttackTimeMsec);
	void SetChorusDepth(float Depth);
	void SetChorusEnabled(bool EnableChorus);
	void SetChorusFeedback(float Feedback);
	void SetChorusFrequency(float Frequency);
	void SetDecayTime(float DecayTimeMsec);
	void SetEnableLegato(bool LegatoEnabled);
	bool SetEnablePatch(const struct FPatchId& PatchId, const bool bIsEnabled);
	void SetEnablePolyphony(bool bEnablePolyphony);
	void SetEnableRetrigger(bool RetriggerEnabled);
	void SetEnableUnison(bool EnableUnison);
	void SetFilterAlgorithm(ESynthFilterAlgorithm FilterAlgorithm);
	void SetFilterFrequency(float FilterFrequencyHz);
	void SetFilterFrequencyMod(float FilterFrequencyHz);
	void SetFilterQ(float FilterQ);
	void SetFilterQMod(float FilterQ);
	void SetFilterType(ESynthFilterType FilterType);
	void SetGainDb(float GainDb);
	void SetLFOFrequency(int32 LFOIndex, float FrequencyHz);
	void SetLFOFrequencyMod(int32 LFOIndex, float FrequencyModHz);
	void SetLFOGain(int32 LFOIndex, float Gain);
	void SetLFOGainMod(int32 LFOIndex, float GainMod);
	void SetLFOMode(int32 LFOIndex, ESynthLFOMode LFOMode);
	void SetLFOPatch(int32 LFOIndex, ESynthLFOPatchType LFOPatchType);
	void SetLFOType(int32 LFOIndex, ESynthLFOType LFOType);
	void SetModEnvAttackTime(const float AttackTimeMsec);
	void SetModEnvBiasInvert(const bool bInvert);
	void SetModEnvBiasPatch(const ESynthModEnvBiasPatch InPatchType);
	void SetModEnvDecayTime(const float DecayTimeMsec);
	void SetModEnvDepth(const float Depth);
	void SetModEnvInvert(const bool bInvert);
	void SetModEnvPatch(const ESynthModEnvPatch InPatchType);
	void SetModEnvReleaseTime(const float Release);
	void SetModEnvSustainGain(const float SustainGain);
	void SetOscCents(int32 OscIndex, float Cents);
	void SetOscFrequencyMod(int32 OscIndex, float OscFreqMod);
	void SetOscGain(int32 OscIndex, float OscGain);
	void SetOscGainMod(int32 OscIndex, float OscGainMod);
	void SetOscOctave(int32 OscIndex, float Octave);
	void SetOscPulsewidth(int32 OscIndex, float Pulsewidth);
	void SetOscSemitones(int32 OscIndex, float Semitones);
	void SetOscSync(const bool bIsSynced);
	void SetOscType(int32 OscIndex, ESynth1OscType OscType);
	void SetPan(float Pan);
	void SetPitchBend(float PitchBend);
	void SetPortamento(float Portamento);
	void SetReleaseTime(float ReleaseTimeMsec);
	void SetSpread(float Spread);
	void SetStereoDelayFeedback(float DelayFeedback);
	void SetStereoDelayIsEnabled(bool StereoDelayEnabled);
	void SetStereoDelayMode(ESynthStereoDelayMode StereoDelayMode);
	void SetStereoDelayRatio(float DelayRatio);
	void SetStereoDelayTime(float DelayTimeMsec);
	void SetStereoDelayWetlevel(float DelayWetlevel);
	void SetSustainGain(float SustainGain);
	void SetSynthPreset(const struct FModularSynthPreset& SynthPreset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModularSynthComponent">();
	}
	static class UModularSynthComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModularSynthComponent>();
	}
};

// Class Synthesis.SourceEffectBitCrusherPreset
// 0x0038 (0x0078 - 0x0040)
class USourceEffectBitCrusherPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x30];                                      // 0x0040(0x0030)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectBitCrusherSettings        Settings;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectBitCrusherSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectBitCrusherPreset">();
	}
	static class USourceEffectBitCrusherPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectBitCrusherPreset>();
	}
};

// Class Synthesis.SourceEffectChorusPreset
// 0x0058 (0x0098 - 0x0040)
class USourceEffectChorusPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x40];                                      // 0x0040(0x0040)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectChorusSettings            Settings;                                          // 0x0080(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectChorusSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectChorusPreset">();
	}
	static class USourceEffectChorusPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectChorusPreset>();
	}
};

// Class Synthesis.SourceEffectDynamicsProcessorPreset
// 0x0078 (0x00B8 - 0x0040)
class USourceEffectDynamicsProcessorPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x50];                                      // 0x0040(0x0050)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectDynamicsProcessorSettings Settings;                                          // 0x0090(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectDynamicsProcessorSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectDynamicsProcessorPreset">();
	}
	static class USourceEffectDynamicsProcessorPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectDynamicsProcessorPreset>();
	}
};

// Class Synthesis.SourceEffectEQPreset
// 0x0048 (0x0088 - 0x0040)
class USourceEffectEQPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x38];                                      // 0x0040(0x0038)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectEQSettings                Settings;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectEQSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectEQPreset">();
	}
	static class USourceEffectEQPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectEQPreset>();
	}
};

// Class Synthesis.SourceEffectFilterPreset
// 0x0040 (0x0080 - 0x0040)
class USourceEffectFilterPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x34];                                      // 0x0040(0x0034)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectFilterSettings            Settings;                                          // 0x0074(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectFilterSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectFilterPreset">();
	}
	static class USourceEffectFilterPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectFilterPreset>();
	}
};

// Class Synthesis.SourceEffectFoldbackDistortionPreset
// 0x0040 (0x0080 - 0x0040)
class USourceEffectFoldbackDistortionPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x34];                                      // 0x0040(0x0034)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectFoldbackDistortionSettings Settings;                                         // 0x0074(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectFoldbackDistortionSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectFoldbackDistortionPreset">();
	}
	static class USourceEffectFoldbackDistortionPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectFoldbackDistortionPreset>();
	}
};

// Class Synthesis.SourceEffectPannerPreset
// 0x0030 (0x0070 - 0x0040)
class USourceEffectPannerPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x2C];                                      // 0x0040(0x002C)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectPannerSettings            Settings;                                          // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectPannerSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectPannerPreset">();
	}
	static class USourceEffectPannerPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectPannerPreset>();
	}
};

// Class Synthesis.SourceEffectPhaserPreset
// 0x0048 (0x0088 - 0x0040)
class USourceEffectPhaserPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x38];                                      // 0x0040(0x0038)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectPhaserSettings            Settings;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectPhaserSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectPhaserPreset">();
	}
	static class USourceEffectPhaserPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectPhaserPreset>();
	}
};

// Class Synthesis.SourceEffectRingModulationPreset
// 0x0050 (0x0090 - 0x0040)
class USourceEffectRingModulationPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x3C];                                      // 0x0040(0x003C)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectRingModulationSettings    Settings;                                          // 0x007C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectRingModulationSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectRingModulationPreset">();
	}
	static class USourceEffectRingModulationPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectRingModulationPreset>();
	}
};

// Class Synthesis.SourceEffectSimpleDelayPreset
// 0x0058 (0x0098 - 0x0040)
class USourceEffectSimpleDelayPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x40];                                      // 0x0040(0x0040)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectSimpleDelaySettings       Settings;                                          // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectSimpleDelaySettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectSimpleDelayPreset">();
	}
	static class USourceEffectSimpleDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectSimpleDelayPreset>();
	}
};

// Class Synthesis.SourceEffectStereoDelayPreset
// 0x0050 (0x0090 - 0x0040)
class USourceEffectStereoDelayPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x3C];                                      // 0x0040(0x003C)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectStereoDelaySettings       Settings;                                          // 0x007C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectStereoDelaySettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectStereoDelayPreset">();
	}
	static class USourceEffectStereoDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectStereoDelayPreset>();
	}
};

// Class Synthesis.SourceEffectWaveShaperPreset
// 0x0038 (0x0078 - 0x0040)
class USourceEffectWaveShaperPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_40[0x30];                                      // 0x0040(0x0030)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSourceEffectWaveShaperSettings        Settings;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectWaveShaperSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectWaveShaperPreset">();
	}
	static class USourceEffectWaveShaperPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectWaveShaperPreset>();
	}
};

// Class Synthesis.SubmixEffectDelayPreset
// 0x0050 (0x0090 - 0x0040)
class USubmixEffectDelayPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_40[0x34];                                      // 0x0040(0x0034)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSubmixEffectDelaySettings             Settings;                                          // 0x0074(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSubmixEffectDelaySettings             DynamicSettings;                                   // 0x0080(0x000C)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-8 ])

public:
	float GetMaxDelayInMilliseconds();
	void SetDelay(float Length);
	void SetInterpolationTime(float Time);
	void SetSettings(const struct FSubmixEffectDelaySettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectDelayPreset">();
	}
	static class USubmixEffectDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectDelayPreset>();
	}
};

// Class Synthesis.SubmixEffectFilterPreset
// 0x0040 (0x0080 - 0x0040)
class USubmixEffectFilterPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_40[0x34];                                      // 0x0040(0x0034)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSubmixEffectFilterSettings            Settings;                                          // 0x0074(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetFilterAlgorithm(ESubmixFilterAlgorithm InAlgorithm);
	void SetFilterCutoffFrequency(float InFrequency);
	void SetFilterCutoffFrequencyMod(float InFrequency);
	void SetFilterQ(float InQ);
	void SetFilterQMod(float InQ);
	void SetFilterType(ESubmixFilterType InType);
	void SetSettings(const struct FSubmixEffectFilterSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectFilterPreset">();
	}
	static class USubmixEffectFilterPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectFilterPreset>();
	}
};

// Class Synthesis.SubmixEffectFlexiverbPreset
// 0x0048 (0x0088 - 0x0040)
class USubmixEffectFlexiverbPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_40[0x38];                                      // 0x0040(0x0038)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSubmixEffectFlexiverbSettings         Settings;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSubmixEffectFlexiverbSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectFlexiverbPreset">();
	}
	static class USubmixEffectFlexiverbPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectFlexiverbPreset>();
	}
};

// Class Synthesis.SubmixEffectTapDelayPreset
// 0x0070 (0x00B0 - 0x0040)
class USubmixEffectTapDelayPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_40[0x40];                                      // 0x0040(0x0040)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSubmixEffectTapDelaySettings          Settings;                                          // 0x0080(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x18];                                      // 0x0098(0x0018)(Fixing Struct Size After Last Property [ Dumper-8 ])

public:
	void AddTap(int32* TapId);
	float GetMaxDelayInMilliseconds();
	void GetTap(int32 TapId, struct FTapDelayInfo* TapInfo);
	void GetTapIds(TArray<int32>* TapIds);
	void RemoveTap(int32 TapId);
	void SetInterpolationTime(float Time);
	void SetSettings(const struct FSubmixEffectTapDelaySettings& InSettings);
	void SetTap(int32 TapId, const struct FTapDelayInfo& TapInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectTapDelayPreset">();
	}
	static class USubmixEffectTapDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectTapDelayPreset>();
	}
};

// Class Synthesis.Synth2DSlider
// 0x0370 (0x0470 - 0x0100)
class USynth2DSlider final : public UWidget
{
public:
	float                                         ValueX;                                            // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueY;                                            // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueXDelegate;                                    // 0x0108(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueYDelegate;                                    // 0x0118(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSynth2DSliderStyle                    WidgetStyle;                                       // 0x0128(0x02B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderHandleColor;                                 // 0x03E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IndentHandle;                                      // 0x03F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x03F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F2[0x2];                                      // 0x03F2(0x0002)(Fixing Size After Last Property [ Dumper-8 ])
	float                                         StepSize;                                          // 0x03F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x03F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-8 ])
	TMulticastInlineDelegate<void()>              OnMouseCaptureBegin;                               // 0x0400(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMouseCaptureEnd;                                 // 0x0410(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnControllerCaptureBegin;                          // 0x0420(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnControllerCaptureEnd;                            // 0x0430(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnValueChangedX;                                   // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnValueChangedY;                                   // 0x0450(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_460[0x10];                                     // 0x0460(0x0010)(Fixing Struct Size After Last Property [ Dumper-8 ])

public:
	void SetIndentHandle(bool InValue);
	void SetLocked(bool InValue);
	void SetSliderHandleColor(const struct FLinearColor& InValue);
	void SetStepSize(float InValue);
	void SetValue(const struct FVector2D& InValue);

	struct FVector2D GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Synth2DSlider">();
	}
	static class USynth2DSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynth2DSlider>();
	}
};

// Class Synthesis.GranularSynth
// 0x0350 (0x0950 - 0x0600)
class UGranularSynth final : public USynthComponent
{
public:
	class USoundWave*                             GranulatedSoundWave;                               // 0x0600(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_608[0x348];                                    // 0x0608(0x0348)(Fixing Struct Size After Last Property [ Dumper-8 ])

public:
	void NoteOff(const float Note, const bool bKill);
	void NoteOn(const float Note, const int32 Velocity, const float Duration);
	void SetAttackTime(const float AttackTimeMsec);
	void SetDecayTime(const float DecayTimeMsec);
	void SetGrainDuration(const float BaseDurationMsec, const struct FVector2D& DurationRange);
	void SetGrainEnvelopeType(const EGranularSynthEnvelopeType EnvelopeType);
	void SetGrainPan(const float BasePan, const struct FVector2D& PanRange);
	void SetGrainPitch(const float BasePitch, const struct FVector2D& PitchRange);
	void SetGrainProbability(const float InGrainProbability);
	void SetGrainsPerSecond(const float InGrainsPerSecond);
	void SetGrainVolume(const float BaseVolume, const struct FVector2D& VolumeRange);
	void SetPlaybackSpeed(const float InPlayheadRate);
	void SetPlayheadTime(const float InPositionSec, const float LerpTimeSec, EGranularSynthSeekType SeekType);
	void SetReleaseTimeMsec(const float ReleaseTimeMsec);
	void SetScrubMode(const bool bScrubMode);
	void SetSoundWave(class USoundWave* InSoundWave);
	void SetSustainGain(const float SustainGain);

	float GetCurrentPlayheadTime() const;
	float GetSampleDuration() const;
	bool IsLoaded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GranularSynth">();
	}
	static class UGranularSynth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGranularSynth>();
	}
};

// Class Synthesis.SynthSamplePlayer
// 0x0130 (0x0730 - 0x0600)
class USynthSamplePlayer final : public USynthComponent
{
public:
	class USoundWave*                             SoundWave;                                         // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSampleLoaded;                                    // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float ProgressPercent, float ProgressTimeSeconds)> OnSamplePlaybackProgress; // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_628[0x108];                                    // 0x0628(0x0108)(Fixing Struct Size After Last Property [ Dumper-8 ])

public:
	void SeekToTime(float TimeSec, ESamplePlayerSeekType SeekType, bool bWrap);
	void SetPitch(float InPitch, float TimeSec);
	void SetScrubMode(bool bScrubMode);
	void SetScrubTimeWidth(float InScrubTimeWidthSec);
	void SetSoundWave(class USoundWave* InSoundWave);

	float GetCurrentPlaybackProgressPercent() const;
	float GetCurrentPlaybackProgressTime() const;
	float GetSampleDuration() const;
	bool IsLoaded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthSamplePlayer">();
	}
	static class USynthSamplePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthSamplePlayer>();
	}
};

// Class Synthesis.SynthKnob
// 0x02F8 (0x03F8 - 0x0100)
class USynthKnob final : public UWidget
{
public:
	float                                         Value;                                             // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseSpeed;                                        // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseFineTuneSpeed;                                // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ShowTooltipInfo : 1;                               // 0x0110(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-8 ])
	class FText                                   ParameterName;                                     // 0x0118(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ParameterUnits;                                    // 0x0130(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueDelegate;                                     // 0x0148(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSynthKnobStyle                        WidgetStyle;                                       // 0x0158(0x0238)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x0390(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x0391(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-8 ])
	TMulticastInlineDelegate<void()>              OnMouseCaptureBegin;                               // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMouseCaptureEnd;                                 // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnControllerCaptureBegin;                          // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnControllerCaptureEnd;                            // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnValueChanged;                                    // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E8[0x10];                                     // 0x03E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-8 ])

public:
	void SetLocked(bool InValue);
	void SetStepSize(float InValue);
	void SetValue(float InValue);

	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthKnob">();
	}
	static class USynthKnob* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthKnob>();
	}
};

}

